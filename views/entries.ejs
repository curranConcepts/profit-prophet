<!DOCTYPE html>
<html data-theme="business" lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Profit Prophet | Entries</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css" integrity="sha512-1sCRPdkRXhBV2PBLUdRb4tMg1w2YPf37qatUFeS7zlBy7jJI8Lf4VHwWfZZfpXtYSLy85pkm9GaYVYMfw5BC1A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <style>
    @import url("https://fonts.googleapis.com/css2?family=Short+Stack&display=swap");

    body {
      font-family: "Short Stack", cursive;
    }
  </style>
  <link rel="stylesheet" href="css/style.css" />
</head>

<body class="doodle">
  <fieldset>
    <legend>[Profit Prophet]</legend>
    <div class="nav-bar">
      <div class="nav1">
        <a href="/dashboard"><button class="yellowButton">Home</button></a>
        <a href="/entries"><button class="yellowButton">Entries</button></a>
        <a href="/tasks" id="grow"><button class="yellowButton">Tasks</button></a>
      </div>
      <p class="loginStatus">Logged in as: <%= user.userName %> </p>
      <a href="/logout">
        <button class="yellowButton">Log Out</button>
      </a>
    </div>
    <fieldset>
      <legend>New Entry</legend>
      <section class="timerInfo">
        <h1 id="hours">00</h1>
        <h1>:</h1>
        <h1 id="minutes">00</h1>
        <h1>:</h1>
        <h1 id="seconds">00</h1>
      </section>
      <div class="timerButtons">
        <button id="start" class="greenButton">Start</button>
        <button id="pause" class="greyButton">Pause/Stop</button>
        <button id="reset" class="greyButton">Reset</button>
        <button id="record" class="redButton">Record</button>
      </div>
      <form class="newEntry" action="/entries/addEntry" method="POST">
        <select id="task" name="task">
          <option disabled selected>Select Task</option>
          <% tasks.forEach( el => { %>
          <option value="<%= el.task %>" data-measure="<%= el.measure %>" data-pay="<%= el.pay %>"><%= el.task %></option>
          <% }) %>
        </select>
        <input type="text" id="duration" placeholder="Duration" name="duration" />
        <input type="number" id="units" step="any" placeholder="Units" name="units" oninput="calculatePay()" />
        <input type="text" id="measure" placeholder="measure" name="measure">
        <input type="number" id="pay" step="any" placeholder="$ Total" name="pay" />
        <input type="submit" class="submitButton" />
      </form>

    </fieldset>
    <h3>Entries</h3>
    <table>
      <thead>
        <tr>
          <th>Date</th>
          <th>Task</th>
          <th>Units</th>
          <th>Measure</th>
          <th>Duration</th>
          <th>$Pay</th>
        </tr>
      </thead>
      <tbody>
        <% entries.forEach(entries => { %>
        <tr>
          <td class="tableData"><%= entries.date.toLocaleDateString() %></td>
          <td class="tableData"><%= entries.task %></td>
          <td class="tableData"><%= entries.units %></td>
          <td class="tableData"><%= entries.measure %></td>
          <td class="tableData"><%= entries.duration %></td>
          <td class="tableData"><%= entries.pay %></td>
          <td class="tableData">
            <form action="/entries/deleteEntry/<%= entries._id %>?_method=DELETE" method="POST">
              <button class="deleteButton fa fa-trash" type="submit"></button>
            </form>
          </td>
        </tr>
        <% }) %>
      </tbody>
    </table>
  </fieldset>
  <script>
    // Auto-populate form fields
    // Get references to the select elements
    const taskSelect = document.getElementById('task');
    const measureSelect = document.getElementById('measure');
    const unitsInput = document.getElementById('units');
    const payInput = document.getElementById('pay');


    // Listen for changes in the selected task
    taskSelect.addEventListener('change', () => {
      const selectedTask = taskSelect.options[taskSelect.selectedIndex];
      const selectedMeasure = selectedTask.getAttribute('data-measure');

      // Update the measure field based on the selected task
      measureSelect.value = selectedMeasure;
    });
    // Function to calculate and update the pay field
    function calculatePay() {
        const selectedTask = document.getElementById('task').value; // Get the selected task
        const units = parseFloat(unitsInput.value); // Parse the user input to a number
        const tasks = <%- JSON.stringify(tasks) %> // Pass the tasks data from EJS to JavaScript

            // Find the task in the tasks array that matches the selected task
            const task = tasks.find(task => task.task === selectedTask);

        if (task) {
            // Calculate pay by multiplying units with the task's pay rate
            const pay = units * task.pay;
            // Update the pay input field with the calculated value
            payInput.value = pay;
        } else {
            // Handle the case where the selected task is not found
            payInput.value = ''; // Clear the pay input field
        }
    }

    // Attach the calculatePay function to the input event
    unitsInput.addEventListener('input', calculatePay);
  </script>
  <script src="js/easyTimer.js"></script>
  <script src="js/script.js"></script>
</body>

</html>
